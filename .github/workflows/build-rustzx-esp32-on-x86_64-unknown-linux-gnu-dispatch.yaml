name: Build RustZX-ESP32

on:
  workflow_dispatch:
    inputs:
      rust_build_branch:
        description: 'Branch with rust-build scripts'
        required: true
        default: 'main'
      toolchain_version:
        description: 'Version of Rust IDF toolchain'
        required: true
        default: '1.56.0.1'
      esp_idf_version:
        description: 'ESP-IDF version for embuild'
        required: true
        default: 'branch:master'
      target:
        required: true
        default: 'xtensa-esp32s3-espidf'
      board:
        required: true
        default: 'esp32s3_usb_otg'

jobs:
  get_release:
    # https://github.com/octokit/request-action
    name: Get release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.url }}
    steps:
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
        route: GET /repos/{owner}/{repo}/releases/latest
        owner: georgik
        repo: rustzx-esp32
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env:
        response:  ${{ steps.get_latest_release.outputs.data }}
  build-rustzx-esp32:
    name: Build RustZX using ${{ matrix.os }}
    needs: get_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        include:
        - os: ubuntu-18.04
          ARCH: ''
    steps:
      - name: Check out Rust installation scripts
        uses: actions/checkout@v2
        with:
          repository: esp-rs/rust-build
          path: rust-build
          ref: ${{ github.event.inputs.rust_build_branch }}
      - name: Set up Python
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Setup Ninja
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-18.04' || matrix.os == 'windows-latest' }}
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Installing Rust toolchain
        run: |
          ./rust-build/install-rust-toolchain.sh --toolchain-version ${{ github.event.inputs.toolchain_version }} --export-file "export-esp-${{ github.event.inputs.toolchain_version }}.sh" --extra-crates "ldproxy" --toolchain-destination "${HOME}/.rustup/toolchains/esp-${{ github.event.inputs.toolchain_version }}"
      - name: Check out RustZX-ESP32
        uses: actions/checkout@v2
        with:
          path: rustzx-esp32
      - name: Build RustZX for ${{ github.event.inputs.target }}
        working-directory: rustzx-esp32
        run: |
          source "../export-esp-${{ github.event.inputs.toolchain_version }}.sh"
          export ESP_IDF_VERSION=${{ github.event.inputs.esp_idf_version }}
          cargo +esp-${{ github.event.inputs.toolchain_version }} build --target ${{ github.event.inputs.target }} --release --features "${{ github.event.inputs.board }} native"
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get_release.outputs.upload_url }}
          asset_path: rustzx-esp32/target/${{ github.event.inputs.target }}/release/rustzx-esp32
          asset_name: rustzx-esp32-${{ github.event.inputs.board }}
          asset_content_type: 'application/octet-stream'
